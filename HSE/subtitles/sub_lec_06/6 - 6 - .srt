1
00:00:12,690 --> 00:00:20,110
Шестая лекция, лабораторная часть.

2
00:00:20,110 --> 00:00:21,462
Автокорреляция.

3
00:00:21,462 --> 00:00:26,870
Сейчас мы поработаем с данными,
в которых присутствует автокорреляция.

4
00:00:26,870 --> 00:00:32,970
Открываем заготовку

5
00:00:32,970 --> 00:00:37,711
шестой недели, еlab_06_before.R.

6
00:00:37,711 --> 00:00:42,526
Соответственно, загружаем все пакеты,
которые нам потребуются на этот раз.

7
00:00:42,526 --> 00:00:47,644
Нам потребуется уйма пакетов
дополнительных: и lubridate для

8
00:00:47,644 --> 00:00:53,120
работы с данными, и sandwich для
робастных стандартных ошибок,

9
00:00:53,120 --> 00:00:57,609
и три пакета для тестов,
и пакеты для создания временных рядов,

10
00:00:57,609 --> 00:01:02,060
и манипуляция с данными,
и пакет для рисования графиков,

11
00:01:02,060 --> 00:01:07,560
а также пакеты для загрузки
данных из интернет-источников,

12
00:01:07,560 --> 00:01:13,410
потому что в Интернете огромное количество
открытых данных по временным рядам,

13
00:01:13,410 --> 00:01:18,128
как по финансовым, так и экономическим,
и, конечно, можно их, заходить на нужный

14
00:01:18,128 --> 00:01:22,432
сайт, скачивать, сохранять в виде файла,
потом этот файл читать в R,

15
00:01:22,432 --> 00:01:27,310
но поскольку R – это очень популярный
статистический пакет, то, скорее всего,

16
00:01:27,310 --> 00:01:34,086
если сайт популярный, то загрузка уже
реализована в каком-нибудь пакете R.

17
00:01:34,086 --> 00:01:38,070
Пакеты broom, bstats,
rusquant и sophisthse,

18
00:01:38,070 --> 00:01:42,354
они находятся не на официальном
репозитории, экран, а ставятся с github.

19
00:01:42,354 --> 00:01:45,254
Вот на всякий случай наверху
закомментированы команды,

20
00:01:45,254 --> 00:01:46,907
которые позволяют их поставить.

21
00:01:46,907 --> 00:01:52,960
Остальные пакеты ставятся стандартно
с официального репозитория.

22
00:01:52,960 --> 00:01:55,161
Как там у нас, все заготовлено?

23
00:01:55,161 --> 00:01:55,868
Поехали!

24
00:01:55,868 --> 00:01:59,526
Давайте для начала определимся,
как в R работать с данными,

25
00:01:59,526 --> 00:02:03,789
поскольку у временных рядов,
естественно, есть такая характеристика,

26
00:02:03,789 --> 00:02:08,391
как дата,
когда было получено это наблюдение.

27
00:02:08,391 --> 00:02:13,665
Как правило, даты, которые у вас уже есть,
они в текстовом формате.

28
00:02:13,665 --> 00:02:18,570
Ну, давайте введем какой-нибудь x,
который будет просто текстовой переменной,

29
00:02:18,570 --> 00:02:23,802
и это будет датой в произвольном формате,
допустим, 2012,

30
00:02:23,802 --> 00:02:28,783
четвертый месяц, 15-е число и, скажем,

31
00:02:28,783 --> 00:02:34,212
2011, восьмой месяц, 17-е число.

32
00:02:34,212 --> 00:02:39,085
Вот x состоит,
это просто пока вектор из строк.

33
00:02:39,085 --> 00:02:44,583
Соответственно, пакет lubridate, который
был загружен в самом начале, он позволяет

34
00:02:44,583 --> 00:02:49,967
конвертировать такие текстовые даты
в стандартный формат с датами.

35
00:02:49,967 --> 00:02:52,290
Давайте отконвертируем y.

36
00:02:52,290 --> 00:02:58,590
Нам надо указать,
в каком порядке идут год, месяц и день.

37
00:02:58,590 --> 00:03:03,426
Соответственно, у нас
идут сначала год (year),

38
00:03:03,426 --> 00:03:07,220
потом идет месяц (month),
и потом идет день (day).

39
00:03:07,220 --> 00:03:14,738
Соответственно, этот формат – это ymd,
year-month-day, от x, ymd(x).

40
00:03:14,738 --> 00:03:17,637
Соответственно, что произошло?

41
00:03:17,637 --> 00:03:19,960
Давайте посмотрим на наш y.

42
00:03:19,960 --> 00:03:24,330
R их распознал, чем стало лучше?

43
00:03:24,330 --> 00:03:28,030
Оказывается, с датами можно
выполнять многие операции,

44
00:03:28,030 --> 00:03:30,150
которые обычно выполняют с числами.

45
00:03:30,150 --> 00:03:33,414
Например, есть на датах
определенная операция сложения.

46
00:03:33,414 --> 00:03:35,842
Я могу к текущей дате прибавить 10 дней.

47
00:03:35,842 --> 00:03:42,315
Возьму и, например, или давайте даже 20,
напишу, соответственно, y + days(20).

48
00:03:42,315 --> 00:03:47,570
Соответственно, если к исходным
датам прибавить 20 дней,

49
00:03:47,570 --> 00:03:52,193
вот как компьютер аккуратненько
переведет месяцы в нужные, помня о том,

50
00:03:52,193 --> 00:03:56,440
сколько в том месяце дней: 30,
31 или даже 28.

51
00:03:56,440 --> 00:04:02,951
Точно так же можно попытаться
прибавить несколько лет или отнять,

52
00:04:02,951 --> 00:04:11,540
например, из y отнять 10 лет и
получить данные 10 лет назад даты.

53
00:04:11,540 --> 00:04:16,150
Точно так же из этого y можно вытащить,

54
00:04:16,150 --> 00:04:21,238
собственно, дни, 15,

55
00:04:21,238 --> 00:04:26,210
17 число, месяцы можно вытащить, и,

56
00:04:26,210 --> 00:04:30,125
конечно, год можно вытащить.

57
00:04:30,125 --> 00:04:34,665
Подробную информацию о других
возможностях пакета lubridate,

58
00:04:34,665 --> 00:04:38,545
соответственно, можно
посмотреть в его документации.

59
00:04:38,545 --> 00:04:43,300
У него замечательная виньетка есть,
которая вызывается командой 

60
00:04:43,300 --> 00:04:49,197
vignette("lubridate"), и можно посмотреть
на официальную документацию,

61
00:04:49,197 --> 00:04:51,960
которая там очень удачно написана.

62
00:04:51,960 --> 00:04:56,170
Теперь создадим наш первый временной ряд,

63
00:04:56,170 --> 00:05:00,760
то есть значения числовые x,

64
00:05:00,760 --> 00:05:06,698
занумерованные временем, то есть каждому
x будет сопоставлена какая-то дата.

65
00:05:06,698 --> 00:05:08,528
Временные ряды бывают разные.

66
00:05:08,528 --> 00:05:11,556
Есть стандартные типы, есть,
например, годовые временные ряды,

67
00:05:11,556 --> 00:05:15,582
где каждому году соответствует один
показатель месячный, квартальный, дневные,

68
00:05:15,582 --> 00:05:20,480
бывают нерегулярные,
бывают посекундные какие-нибудь котировки.

69
00:05:20,480 --> 00:05:24,300
Для начала начнем с
какого-нибудь набора данных,

70
00:05:24,300 --> 00:05:27,870
где одно наблюдение
соответствует одному дню.

71
00:05:27,870 --> 00:05:31,851
Создадим какую-нибудь,
просто для примера переменную x,

72
00:05:31,851 --> 00:05:36,900
пусть это будут нормальные случайные
величины в количестве пяти штук,

73
00:05:36,900 --> 00:05:39,444
то есть x – это просто 5 чисел.

74
00:05:39,444 --> 00:05:46,770
Давайте я окошко сделаю
чуть-чуть побольше.

75
00:05:46,770 --> 00:05:48,458
Создадим даты.

76
00:05:48,458 --> 00:05:52,200
Допустим, у меня даты начинаются,

77
00:05:52,200 --> 00:05:56,386
стартовая дата пусть

78
00:05:56,386 --> 00:06:03,910
будет 2014-01-01,

79
00:06:03,910 --> 00:06:10,620
и плюс дни от 0 до 4 прибавлю.

80
00:06:10,620 --> 00:06:14,810
Соответственно, y – это
у меня будет вектор дат.

81
00:06:14,810 --> 00:06:19,560
И, соответственно,

82
00:06:19,560 --> 00:06:24,310
я создаю объект, временной ряд, где
данные будут находиться в переменной x,

83
00:06:24,310 --> 00:06:29,680
а переменная y, вектор y будет отвечать
за даты соответствующих наблюдений.

84
00:06:29,680 --> 00:06:34,579
Пакет, который реализует, в частности,
возможность нерегулярных дат,

85
00:06:34,579 --> 00:06:39,919
например, данные могут быть с пропусками,
не каждый день,

86
00:06:39,919 --> 00:06:42,750
– это пакет zoo.

87
00:06:42,750 --> 00:06:48,071
Соответственно, мы введем объект от ts,
это наш временной ряд.

88
00:06:48,071 --> 00:06:52,682
Это будет zoo(x,order.by=y),
а упорядочены наши

89
00:06:52,682 --> 00:06:58,174
наблюдения будут в порядке,
задаваемом переменной y.

90
00:06:58,174 --> 00:07:03,300
Соответственно, у нас появился объект ts,

91
00:07:03,300 --> 00:07:09,003
и здесь уже каждому числовому
значению соответствует

92
00:07:09,003 --> 00:07:14,007
некая привязанная дата,
0.09 – привязанная дата 2014-01-02.

93
00:07:14,007 --> 00:07:15,990
Какие появились плюсы?

94
00:07:15,990 --> 00:07:21,190
Чем такой сложный,
составной объект стал лучше, чем просто x?

95
00:07:21,190 --> 00:07:25,771
Тем, что появились различные функции,
которые позволяют смотреть вперед на

96
00:07:25,771 --> 00:07:28,380
несколько дней или назад
на несколько дней.

97
00:07:28,380 --> 00:07:32,589
Ну, например, можно посмотреть
логированное, то есть прошлое,

98
00:07:32,589 --> 00:07:39,130
значение переменной ts на шаг,
на день назад: lag(ts,-1).

99
00:07:39,130 --> 00:07:42,974
Вот, например,
значение переменной на день назад:

100
00:07:42,974 --> 00:07:47,478
2014-01-02 показатель
день назад был -0.19,

101
00:07:47,478 --> 00:07:51,980
то есть вчерашний показатель
для даты 2014-01-02,

102
00:07:51,980 --> 00:07:55,640
то есть для 2014-01-01
он является текущим,

103
00:07:55,640 --> 00:07:59,443
а для 2014-01-02 он является вчерашним.

104
00:07:59,443 --> 00:08:05,388
Можно посмотреть,
как выглядит один lag вперед: lag(ts,1).

105
00:08:05,388 --> 00:08:11,250
Соответственно, это для каждой даты
посчитан автоматом завтрашний показатель.

106
00:08:11,250 --> 00:08:14,540
Можно, например,
посмотреть разницу изменения.

107
00:08:14,540 --> 00:08:18,503
Когда изучают валютный курс, например,
смотрят изменения валютного курса,

108
00:08:18,503 --> 00:08:22,000
то есть разницу,

109
00:08:22,000 --> 00:08:26,893
насколько показатель менялся,
то есть в первый раз он возрос на 0.29,

110
00:08:26,893 --> 00:08:32,014
потом возрос на 1.25,
потом упал на -0.85 и так далее.

111
00:08:32,014 --> 00:08:36,786
Соответственно, помимо дневных,
как уже было сказано,

112
00:08:36,786 --> 00:08:38,880
могут быть месячные, квартальные.

113
00:08:38,880 --> 00:08:42,892
Как правило, месячные и квартальные
данные, они появляются редко и они

114
00:08:42,892 --> 00:08:48,858
являются регулярными, поэтому давайте
введем какой-нибудь объект ts2.

115
00:08:48,858 --> 00:08:54,835
Это будет zooreg, то есть регулярный
временной ряд, то есть есть каждое

116
00:08:54,835 --> 00:08:58,870
наблюдение, ну, за редким исключением,
они будут обозначены n/a как пропуски.

117
00:08:58,870 --> 00:09:04,699
Ряд x, указываем стартовую дату,

118
00:09:04,699 --> 00:09:09,910
пусть у нас будут квартальные
наблюдения yearqtr,

119
00:09:09,910 --> 00:09:13,661
квартальные с, скажем,

120
00:09:13,661 --> 00:09:18,500
2014- 01 квартала.

121
00:09:18,500 --> 00:09:22,567
И, соответственно,
частота данных, надо указать,

122
00:09:22,567 --> 00:09:25,643
частота данных будет 4 наблюдения в год.

123
00:09:25,643 --> 00:09:29,850
Соответственно, можно
посмотреть на набор данных ts2,

124
00:09:29,850 --> 00:09:34,182
ts2 – это квартальные данные, 2014,

125
00:09:34,182 --> 00:09:39,360
1 квартал, 2014, 2 квартал и так далее,
2015, 01 квартал.

126
00:09:39,360 --> 00:09:43,490
Аналогично можно ввести месячные данные.

127
00:09:43,490 --> 00:09:46,562
Что поменяется в этой команде?

128
00:09:46,562 --> 00:09:52,259
Надо указать,
что данными являются год и месяц, yearmon.

129
00:09:52,259 --> 00:09:56,300
Частота таких данных –
12 наблюдений в год.

130
00:09:56,300 --> 00:10:00,860
Давайте назовем этот временной ряд ts3.

131
00:10:00,860 --> 00:10:09,080
Соответственно, мы получили
месячные показатели.

