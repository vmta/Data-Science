1
00:00:13,250 --> 00:00:16,628
Рассмотрим такой маленький вопрос,
а что было бы,

2
00:00:16,628 --> 00:00:20,162
если бы мы неправильно
включили дамми-переменные,

3
00:00:20,162 --> 00:00:23,941
то есть мы бы использовали сразу две,
например, дамми-переменные: одну,

4
00:00:23,941 --> 00:00:28,020
которая бы обозначала, что дом кирпичный,
единичка, и нолик, что дом некирпичный,

5
00:00:28,020 --> 00:00:32,490
а вторую, наоборот, что единичка — дом
не кирпичный, а нолик — дом кирпичный.

6
00:00:32,490 --> 00:00:37,078
Давайте мы создадим искусственно
эту лишнюю дамми-переменную.

7
00:00:37,078 --> 00:00:41,537
В наборе данных f в переменной nonbrick мы

8
00:00:41,537 --> 00:00:46,480
применим функцию recode из пакета memisc.

9
00:00:46,480 --> 00:00:49,777
Если название у функции часто
используется, например,

10
00:00:49,777 --> 00:00:52,803
recode — это такое очень
часто используемое слово,

11
00:00:52,803 --> 00:00:56,499
то поэтому иногда дополнительно надо
указывать, в каком пакете «живёт» функция.

12
00:00:56,499 --> 00:00:59,191
Если функция имеет уникальное имя,
то в этом необходимости нет,

13
00:00:59,191 --> 00:01:02,513
но если в нескольких пакетах содержится
функция с одним и тем же именем,

14
00:01:02,513 --> 00:01:05,305
то тогда надо указывать,
в каком пакете она «живёт».

15
00:01:05,305 --> 00:01:12,080
Наша функция «живёт» в пакете memisc,
два двоеточия, и тут мы указываем recode.

16
00:01:12,080 --> 00:01:19,200
Переменную из набора данных f,
которая называется brick,

17
00:01:19,200 --> 00:01:24,850
мы меняем по принципу:
единичка переходит в нолик,

18
00:01:24,850 --> 00:01:32,395
а нолик переходит в единичку.

19
00:01:32,395 --> 00:01:39,940
Соответственно, теперь если мы
посмотрим на наш набор данных f,

20
00:01:39,940 --> 00:01:45,308
то у нас есть переменная brick,
которая принимает значение 1 и 0,

21
00:01:45,308 --> 00:01:48,330
и переменная nonbrick,
которая принимает значение 0 и 1,

22
00:01:48,330 --> 00:01:50,867
ну совершенно противоположно
с переменной brick.

23
00:01:50,867 --> 00:01:54,830
Что произойдет, если я в модель включу две
эти переменные, что, конечно же, ошибка?

24
00:01:54,830 --> 00:01:59,614
Но, тем не менее, давайте попробуем:
model_wrong равняется линейная модель,

25
00:01:59,614 --> 00:02:01,870
данные беру из набора данных f,

26
00:02:01,870 --> 00:02:07,880
логарифм цены квартиры зависит
от логарифма общей площади,

27
00:02:07,880 --> 00:02:12,980
от переменной brick и
от переменной nonbrick.

28
00:02:12,980 --> 00:02:16,920
Вот модель, смотрим, что произошло.

29
00:02:16,920 --> 00:02:20,259
Смотрите, R даже никак не ругнулся,
как будто ничего не произошло.

30
00:02:20,259 --> 00:02:22,820
Но на самом деле,
если посмотреть описание модели,

31
00:02:22,820 --> 00:02:28,821
summary(model_wrong), то мы увидим,
что на самом деле,

32
00:02:28,821 --> 00:02:32,784
во-первых, естественно, оценить и тот
и тот коэффициент он не смог, потому что у

33
00:02:32,784 --> 00:02:38,010
нас появляется неоднозначность в оценке
коэффициентов, он просто один выкинул.

34
00:02:38,010 --> 00:02:42,226
И, соответственно,
здесь вот фигурирует предупреждение о том,

35
00:02:42,226 --> 00:02:46,097
что одна из оценок коэффициентов
не определена по причине,

36
00:02:46,097 --> 00:02:49,950
что в этом случае тогда
матрица X'X необратима.

37
00:02:49,950 --> 00:02:51,928
Ну то есть что у нас происходит?

38
00:02:51,928 --> 00:02:57,000
R автоматом выкидывает лишние данные
переменной, если вы их по ошибке введёте.

39
00:02:57,000 --> 00:02:58,444
Хорошо.

40
00:02:58,444 --> 00:03:05,387
Следующий сюжет простой, что вместо
сложной проверки гипотез, сравнения

41
00:03:05,387 --> 00:03:10,230
нескольких моделей люди всегда хотели
вот придумать какой-то простой критерий.

42
00:03:10,230 --> 00:03:14,209
Конечно же, надо чётко осознавать, что
использование какого-то одного простого

43
00:03:14,209 --> 00:03:18,683
показателя, это сильное упрощение теории,
но, тем не менее,

44
00:03:18,683 --> 00:03:24,327
в качестве грубого ориентира можно
ориентироваться на простые показатели,

45
00:03:24,327 --> 00:03:29,517
например, на штрафные критерии Акаике
(AIC) и на штрафной критерий BIC.

46
00:03:29,517 --> 00:03:33,181
Соответственно, давайте ещё
раз посмотрим на табличку,

47
00:03:33,181 --> 00:03:38,019
которую мы уже строили:
mtable и посмотрим тут наши

48
00:03:38,019 --> 00:03:43,700
модели model_0, model_1 и model_2.

49
00:03:43,700 --> 00:03:50,090
Соответственно, вот вместо сравнения
этих моделей с помощью f-статистики,

50
00:03:50,090 --> 00:03:55,700
можно просто грубо,
и в данном случае этот критерий сработает,

51
00:03:55,700 --> 00:03:59,440
можно грубо посмотреть вот
на штрафной критерий AIC.

52
00:03:59,440 --> 00:04:04,520
Ещё раз, это штраф: чем штраф меньше,

53
00:04:04,520 --> 00:04:09,600
тем лучше, то есть большой положительный
штраф — это означает плохую модель.

54
00:04:09,600 --> 00:04:16,595
Еще раз, AIC — туда в формулу входит
штраф за большое значение RSS,

55
00:04:16,595 --> 00:04:21,777
за большую непохожесть, за сильную
непохожесть y на прогнозный ŷ,

56
00:04:21,777 --> 00:04:26,860
и сюда же в этот штраф входит штраф за
большое количество коэффициентов в модели.

57
00:04:26,860 --> 00:04:30,422
И, соответственно, по критерию Акаике,

58
00:04:30,422 --> 00:04:34,507
по критерию AIC, видно,
что наименьшее значение,

59
00:04:34,507 --> 00:04:39,102
самое отрицательное, у критерия AIC
достигается для третьей модели, ну,

60
00:04:39,102 --> 00:04:43,917
для модели два, model2 — она третья
по счёту, но вторая по номеру.

61
00:04:43,917 --> 00:04:48,615
И, соответственно,
по этому критерию третья модель лучше.

62
00:04:48,615 --> 00:04:54,235
Заметьте, что разница между нулевой
и первой, — она существенная,

63
00:04:54,235 --> 00:05:00,430
да, от 840 до 1036, в процентах если
мерить, а здесь уже не такая существенная.

64
00:05:00,430 --> 00:05:04,240
То есть по критерию Акаике
модель один и модель два похожи,

65
00:05:04,240 --> 00:05:08,340
но они сильно лучше модели ноль.

66
00:05:08,340 --> 00:05:11,589
И то же самое можно сказать про
скорректированный R²,

67
00:05:11,589 --> 00:05:13,574
вот она строчка R² adjusted.

68
00:05:13,574 --> 00:05:18,525
Тоже простой критерий, который в отличие
от R², он обладает

69
00:05:18,525 --> 00:05:22,439
тем свойством, что он всегда растёт,
когда мы добавляем переменные в модель,

70
00:05:22,439 --> 00:05:26,304
то есть вот R²всегда растёт:
чем больше коэффициентов оценивается,

71
00:05:26,304 --> 00:05:30,283
тем больше R², — а вот
R² adjusted, это тут так вышло,

72
00:05:30,283 --> 00:05:33,414
что он тоже растёт,
но на самом деле он мог бы и упасть.

73
00:05:33,414 --> 00:05:38,482
То есть если б мы включили совершенно
какие-то «левые» бессмысленные переменные,

74
00:05:38,482 --> 00:05:40,979
то R²adjusted
бы скорее всего упал.

75
00:05:40,979 --> 00:05:45,211
И здесь мы видим, что по этому
критерию тоже первая и вторая модели

76
00:05:45,211 --> 00:05:49,687
примерно похожи и существенно лучше,
чем нулевая.

77
00:05:49,687 --> 00:05:52,201
И ещё один, последний,

78
00:05:52,201 --> 00:05:57,994
маленький сюжет — это проверка
гипотезы о пропущенных переменных.

79
00:05:57,994 --> 00:06:02,820
То есть, а вдруг мы оценили модель,
а на самом деле надо было ещё,

80
00:06:02,820 --> 00:06:06,432
не хватает кучи переменных,
то есть тест Рамсея.

81
00:06:06,432 --> 00:06:09,586
Давайте проведём тест
Рамсея для модели два.

82
00:06:09,586 --> 00:06:13,030
Ну, к счастью,
в R он уже реализован одной командой,

83
00:06:13,030 --> 00:06:15,913
то есть считать нам руками ничего не надо.

84
00:06:15,913 --> 00:06:17,840
Мы просто пишем resettest.

85
00:06:17,840 --> 00:06:22,758
Ещё раз, я вот, например, не помню,
как оно называется: resettest с точкой или

86
00:06:22,758 --> 00:06:28,222
без: я набрал reset,
нажал Tab и посмотрел, выбрал функцию.

87
00:06:28,222 --> 00:06:32,972
Просто пакеты пишут разные авторы,
и зачастую трудно угадать,

88
00:06:32,972 --> 00:06:37,468
напишет автор название функции resettest
слитно или resettest с точкой,

89
00:06:37,468 --> 00:06:40,255
или resettest с подчёркиванием.

90
00:06:40,255 --> 00:06:44,708
И мы применяем тест к модели
два и смотрим на результат.

91
00:06:44,708 --> 00:06:48,234
Соответственно, что произошло за кадром?

92
00:06:48,234 --> 00:06:53,041
За кадром эта функция построила
вспомогательную регрессию,

93
00:06:53,041 --> 00:06:58,009
куда были включены прогнозы из модели
два в квадрате, кубы прогнозов,

94
00:06:58,009 --> 00:07:02,582
тут вот написано,
степени свободы равны двум — это означает,

95
00:07:02,582 --> 00:07:07,645
что было включено две
вспомогательных переменных:

96
00:07:07,645 --> 00:07:11,913
ŷ в квадрате и ŷ в кубе, 
две последовательные степени.

97
00:07:11,913 --> 00:07:15,756
И мы видим, что p-value = 0.01,
ну то есть это означает,

98
00:07:15,756 --> 00:07:18,180
что уже всё не так плохо в этой модели.

99
00:07:18,180 --> 00:07:22,871
Хотя на 5 % уровне
значимости гипотеза о том,

100
00:07:22,871 --> 00:07:27,820
что нет пропущенных факторов,
будет отвергнута,

101
00:07:27,820 --> 00:07:32,543
но уже на 1 % уровне
значимости мы можем не

102
00:07:32,543 --> 00:07:36,280
отвергнуть гипотезу о том,
что нет пропущенных переменных.

103
00:07:36,280 --> 00:07:39,458
Соответственно, вот модель
два уже не такая плохая,

104
00:07:39,458 --> 00:07:43,763
но в принципе с ней ещё можно
работать и включать кучу переменных,

105
00:07:43,763 --> 00:07:48,988
которые здесь не упомянуты:
там про расстояние до метро и

106
00:07:48,988 --> 00:07:55,170
так далее.

