1
00:00:13,560 --> 00:00:18,890
Маленький фрагмент «Написание циклов в R».

2
00:00:18,890 --> 00:00:23,690
Как в любом уважающем себя языке
программирования, в R можно писать циклы.

3
00:00:23,690 --> 00:00:28,905
Правда, в R, как правило,
из-за ориентированности

4
00:00:28,905 --> 00:00:33,330
на обработку статистической информации
циклы приходится писать довольно редко, и,

5
00:00:33,330 --> 00:00:37,121
как правило, если у новичка
возникает желание писать цикл в R,

6
00:00:37,121 --> 00:00:40,027
скорее всего,
надо просто поискать какую-то функцию,

7
00:00:40,027 --> 00:00:42,960
которая уже делает эту задачу,
которую уже кто-то написал.

8
00:00:42,960 --> 00:00:47,171
Но всё-таки в редких случаях приходится
писать циклы и, соответственно,

9
00:00:47,171 --> 00:00:48,930
сейчас мы научимся это делать.

10
00:00:48,930 --> 00:00:53,489
Давайте сначала напишем
маленький игрушечный цикл,

11
00:00:53,489 --> 00:00:59,440
который перебирает числа от пяти до десяти
и печатает их сами и их квадраты на экран.

12
00:00:59,440 --> 00:01:03,560
Соответственно, мы задаём цикл,
цикл задаётся командой for.

13
00:01:03,560 --> 00:01:10,627
i пробегает значения, i in, от 5 до 10.

14
00:01:10,627 --> 00:01:14,636
А в фигурных скобках идёт тело цикла.

15
00:01:14,636 --> 00:01:19,541
Мы должны посчитать некую переменную,
давайте назовём её k,

16
00:01:19,541 --> 00:01:21,850
которая будет равна i в квадрате.

17
00:01:21,850 --> 00:01:27,610
И, соответственно,
напечатать сообщение, что i = i,

18
00:01:27,610 --> 00:01:33,180
а i в квадрате = k.

19
00:01:33,180 --> 00:01:40,750
И особый символ \n,
что означает перевод на следующую строчку.

20
00:01:40,750 --> 00:01:45,860
Теперь мы можем запустить наш
цикл и посмотреть на результат.

21
00:01:45,860 --> 00:01:51,479
Соответственно, компьютер пробегает
числа и меняется от пяти до десяти: 5,

22
00:01:51,479 --> 00:01:52,800
6, 7, 8, 9, 10.

23
00:01:52,800 --> 00:01:54,690
И считается автоматом i-квадрат.

24
00:01:54,690 --> 00:01:59,406
Одна из задач, с которой,

25
00:01:59,406 --> 00:02:04,470
например, могут помочь циклы,
это чтение большого количества файлов.

26
00:02:04,470 --> 00:02:08,230
Если у вас есть большое количество
исходных данных, каждая из которых...

27
00:02:08,230 --> 00:02:12,670
каждая табличка исходных данных
занесена в файл со своим именем,

28
00:02:12,670 --> 00:02:15,479
то вы можете прочитать их одним махом.

29
00:02:15,479 --> 00:02:18,550
Давайте разберём это на простом примере.

30
00:02:18,550 --> 00:02:25,777
Установим, давайте
установим рабочую папку...

31
00:02:25,777 --> 00:02:27,190
Сохраним наш файл.

32
00:02:27,190 --> 00:02:31,760
Это будет

33
00:02:31,760 --> 00:02:36,445
cycle_demo.R.

34
00:02:36,445 --> 00:02:41,130
Установим рабочую папку по
месту нахождения файла.

35
00:02:41,130 --> 00:02:46,746
Там у нас находятся две
маленькие таблички,

36
00:02:46,746 --> 00:02:51,540
которые изображают из себя большое
количество наборов данных.

37
00:02:51,540 --> 00:02:55,479
Мы рассмотрим загрузку двух
табличек с помощью цикла.

38
00:02:55,479 --> 00:02:58,340
Одна из них называется file01.csv,

39
00:02:58,340 --> 00:03:04,034
вторая называется file02.csv.

40
00:03:04,034 --> 00:03:09,495
У нас есть желание получить на выходе
большую табличку с названием all_data,

41
00:03:09,495 --> 00:03:12,350
куда будут загружены
данные из всех файлов.

42
00:03:12,350 --> 00:03:16,620
И мы начинаем с того,
что all_data — это пустой набор данных.

43
00:03:16,620 --> 00:03:19,049
После этого мы пишем цикл for.

44
00:03:19,049 --> 00:03:25,320
Бегающая переменная i, она может быть
не только числовой, но и текстовой.

45
00:03:25,320 --> 00:03:27,150
Ну, например...

46
00:03:27,150 --> 00:03:28,768
И назвать её можно не только i.

47
00:03:28,768 --> 00:03:32,080
Давайте назовём её fname,
что будет означать «имя файла».

48
00:03:32,080 --> 00:03:36,280
«Имя файла» у нас принимает
значение либо file01.csv,

49
00:03:36,280 --> 00:03:43,310
либо file02.csv.

50
00:03:43,310 --> 00:03:47,932
Соответственно, компьютер переберёт
в переменную fname по очереди два

51
00:03:47,932 --> 00:03:50,920
значения: file01.csv, file02.csv.

52
00:03:50,920 --> 00:03:54,380
И снова в фигурных скобках тело цикла.

53
00:03:54,380 --> 00:03:58,080
Загружаем набор данных в
какую-нибудь переменную temp.

54
00:04:02,210 --> 00:04:07,620
Соответственно, read.csv

55
00:04:07,620 --> 00:04:12,430
из файла под названием fname.

56
00:04:12,430 --> 00:04:16,990
И дальше нам надо присоединить уже

57
00:04:16,990 --> 00:04:21,090
набранный all_data с
очередным файлом temp.

58
00:04:21,090 --> 00:04:25,879
Соответственно, новая
all_data будет равно rbind,

59
00:04:25,879 --> 00:04:28,750
то есть подклеить строчки к низу,

60
00:04:28,750 --> 00:04:33,510
старый файл all_data и текущий файл temp.

61
00:04:33,510 --> 00:04:39,700
Запускаем наш маленький цикл,

62
00:04:39,700 --> 00:04:46,841
и на выходе получаем
табличку с данными all_data,

63
00:04:46,841 --> 00:04:52,810
где находятся все загруженные
переменные из всех файлов.

64
00:04:52,810 --> 00:04:58,110
Конец блока «Написание циклов в R».

