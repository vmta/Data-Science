1
00:00:12,140 --> 00:00:19,030
Приступим к нашему первому
компьютерному занятию.

2
00:00:19,030 --> 00:00:21,762
Запускаем в первый раз R-Studio.

3
00:00:21,762 --> 00:00:26,827
И после запуска R-Studio,
мы сразу попадаем при первом запуске в

4
00:00:26,827 --> 00:00:30,456
консольный режим, в консольный или,
по-другому, диалоговый режим работы.

5
00:00:30,456 --> 00:00:31,508
В чем его особенность?

6
00:00:31,508 --> 00:00:32,928
Его особенность состоит в том,

7
00:00:32,928 --> 00:00:36,156
что как только вы набрали команду,
она сразу будет исполнена.

8
00:00:36,156 --> 00:00:39,910
Ну, например, я могу использовать
R как простой калькулятор.

9
00:00:39,910 --> 00:00:42,204
Возможно, это не самое
лучшее использование R,

10
00:00:42,204 --> 00:00:49,150
но тем не менее я могу набрать
5 + 6 и получить ответ 11.

11
00:00:49,150 --> 00:00:52,480
Ну, соответственно, я могу выполнять
и более сложные вычисления.

12
00:00:52,480 --> 00:01:00,098
Могу, например,
посчитать факториал числа 10.

13
00:01:00,098 --> 00:01:04,117
Ну, вернемся к более сложным задачам.

14
00:01:04,117 --> 00:01:08,819
Давайте попробуем создать переменную,
в которую поместить число 11.

15
00:01:08,819 --> 00:01:13,262
Ну, например, создадим переменную b,
в которую поместим число 11.

16
00:01:13,262 --> 00:01:18,550
Для этого мы напишем b, вместо равно
мы будем использовать такой значок: <-

17
00:01:18,550 --> 00:01:19,761
(меньше, стрелочка).

18
00:01:19,761 --> 00:01:22,706
Ну и потом число 11,
которое мы хотим поместить в переменную b.

19
00:01:22,706 --> 00:01:27,294
И после того как мы нажимаем Enter,
число 11 поместится в переменную b.

20
00:01:27,294 --> 00:01:34,605
Вот здесь вот справа в уголке мы увидим,
что, список переменных с их значениями.

21
00:01:34,605 --> 00:01:39,962
Вместо стрелочки в виде значка <-

22
00:01:39,962 --> 00:01:44,489
можно, в принципе, использовать =, но это
считается не таким стильным присваиванием.

23
00:01:44,489 --> 00:01:48,847
То есть, в принципе, можно написать
d = 99, и это тоже будет верно,

24
00:01:48,847 --> 00:01:52,883
R тоже поймет такое присваивание,
но стилевой гид Гугла,

25
00:01:52,883 --> 00:01:56,870
в частности, рекомендует использовать
присваивание из двух значков.

26
00:01:56,870 --> 00:01:59,826
Ну, например, потому,
что его можно провести в обе стороны.

27
00:01:59,826 --> 00:02:04,343
Например, можно написать 5 ->
a (5 поместить в другую сторону в

28
00:02:04,343 --> 00:02:05,740
переменную а).

29
00:02:05,740 --> 00:02:11,231
Соответственно, надо первое, что отметить,
когда мы создаем переменные,

30
00:02:11,231 --> 00:02:13,672
ну, помимо того,
что теперь можно с ними работать,

31
00:02:13,672 --> 00:02:18,072
например, можно сейчас набрать a + b
и получить, естественно, ответ 16,

32
00:02:18,072 --> 00:02:22,180
потому что в b лежит число 11,
а в переменной a лежит число 5.

33
00:02:22,180 --> 00:02:24,899
Нужно отметить маленький нюанс,

34
00:02:24,899 --> 00:02:29,220
что R отличает большие,
заглавные и строчные буквы.

35
00:02:29,220 --> 00:02:33,560
То есть если я создам переменную
A (большое), куда помещу 55,

36
00:02:33,560 --> 00:02:38,023
то а (маленькое) и А (большое)
— это две разные переменные.

37
00:02:38,023 --> 00:02:42,238
Я, например, могу написать: а + А,
и результат будет 60,

38
00:02:42,238 --> 00:02:47,200
потому что в а (маленьком) лежит число 5,
а в А (большом) лежит число 55.

39
00:02:47,200 --> 00:02:52,215
Можно создавать переменные не
из одной буквы, а длинные,

40
00:02:52,215 --> 00:02:56,779
которые, может быть, не так удобно
печатать, но зато они более читабельны.

41
00:02:56,779 --> 00:03:01,212
То есть вы можете, например,
написать: moe_lubimoe_chislo, ну и,

42
00:03:01,212 --> 00:03:05,540
скажем, поместить в эту переменную,
пусть будет число 12.

43
00:03:05,540 --> 00:03:10,737
И здесь сразу следует сказать,
что когда вы работаете с функцией,

44
00:03:10,737 --> 00:03:15,034
которая имеет какое-то длинное название,
типа factorial или вот moe_lubimoe_chislo,

45
00:03:15,034 --> 00:03:17,550
тут очень много символов,
это очень долго набирать.

46
00:03:17,550 --> 00:03:23,022
Имеет смысл помнить, что есть такая
полезная кнопка как табуляция.

47
00:03:23,022 --> 00:03:27,237
По кнопке Tab мы можем
дополнить длинную надпись,

48
00:03:27,237 --> 00:03:30,944
если она допускает
единственное толкование.

49
00:03:30,944 --> 00:03:36,612
Ну, например, если я начну писать moe_,
то поскольку сейчас в памяти компьютера

50
00:03:36,612 --> 00:03:41,491
на эти четыре символа (moe и нижнее
подчеркивание) начинается только объект

51
00:03:41,491 --> 00:03:46,380
moe_lubimoe_chislo, то как только я сейчас
нажму Tab, я нажимаю одну кнопку Tab,

52
00:03:46,380 --> 00:03:51,298
и автоматом компьютер мне дополнит,
допишет все до конца.

53
00:03:51,298 --> 00:03:56,022
Я могу посмотреть на moe_lubimoe_chislo,
оно по-прежнему равно 12-ти.

54
00:03:56,022 --> 00:04:00,828
Соответственно, точно
так же и с функциями.

55
00:04:00,828 --> 00:04:04,850
Если я знаю какую-нибудь функцию,
ну, например,

56
00:04:04,850 --> 00:04:10,221
facto и могу нажать Tab и посмотреть все
функции, которые начинаются на facto.

57
00:04:10,221 --> 00:04:13,350
На facto вот в R начинаются
три функции: factor,

58
00:04:13,350 --> 00:04:17,561
которая создает качественные переменные,
factor.scope — это я, честно говоря,

59
00:04:17,561 --> 00:04:21,150
даже не знаю, что это такое,
ну и factorial — считает факториал числа.

60
00:04:21,150 --> 00:04:24,300
Нажимаю Escape,
поскольку мне сейчас эти функции не нужны.

61
00:04:24,300 --> 00:04:30,279
Помимо обычных чисел R легко
работает с большими объемами чисел,

62
00:04:30,279 --> 00:04:31,910
ну, в частности с векторами.

63
00:04:31,910 --> 00:04:34,169
Я могу, например, задать вектор чисел.

64
00:04:34,169 --> 00:04:36,617
Ну пусть, например, вектор w.

65
00:04:36,617 --> 00:04:41,020
Не, давайте, пусть будет вектор y.

66
00:04:41,020 --> 00:04:41,866
Вектор у.

67
00:04:41,866 --> 00:04:44,969
Это будет вектор из нескольких чисел.

68
00:04:44,969 --> 00:04:48,740
Вектора начинаются,
их описания с буковки c.

69
00:04:48,740 --> 00:04:53,451
c, а в скобках через запятую
пишутся необходимые числа.

70
00:04:53,451 --> 00:04:57,312
Ну, например, будет (3, -2, 5, 6,

71
00:04:57,312 --> 00:05:05,390
давайте дальше я напишу
загадочное число NA и потом 9).

72
00:05:05,390 --> 00:05:09,420
с (3, -2, 5, 6, NA и 9).

73
00:05:09,420 --> 00:05:14,743
Могу посмотреть на у, то есть нажимаю
у и Enter и вот вижу свой вектор: 3,

74
00:05:14,743 --> 00:05:16,710
-2, 5, 6, NA и 9.

75
00:05:16,710 --> 00:05:21,674
NA — это такое особое наблюдение,
пропущенное наблюдение.

76
00:05:21,674 --> 00:05:26,340
В реальных данных, к сожалению,
часто встречаются случаи,

77
00:05:26,340 --> 00:05:30,948
когда либо респонденты отказываются
отвечать на вопросы анкеты,

78
00:05:30,948 --> 00:05:33,819
либо по каким-либо другим
причинам нет данных.

79
00:05:33,819 --> 00:05:38,055
Ну, ну там, скажем, за какой-то год
вы не знаете, чему равнялся ВВП,

80
00:05:38,055 --> 00:05:41,566
или есть пропущенная какая-то переменная,
то,

81
00:05:41,566 --> 00:05:44,832
соответственно, вот NA означает,
что у вас нет данных.

82
00:05:44,832 --> 00:05:47,510
Это сокращение от
английского not available.

83
00:05:47,510 --> 00:05:51,697
И с вектором у можно так же,
как и с числом выполнять операции.

84
00:05:51,697 --> 00:05:56,816
Ну, например, я могу написать у + 2 и
получить вектор у, увеличенный на два.

85
00:05:56,816 --> 00:06:02,270
Естественно, там, где не было наблюдений,
если к NA прибавить 2, получится NA.

86
00:06:02,270 --> 00:06:05,800
Но никакой ошибки при
этом компьютер не выдаст.

87
00:06:05,800 --> 00:06:11,130
Среди особых объектов помимо NA есть
еще такой объект, как «не число».

88
00:06:11,130 --> 00:06:15,387
Ну, например,
вот 0 поделить 0 — это «не число».

89
00:06:15,387 --> 00:06:19,110
Если я напишу 0/0, это NaN (not a number).

90
00:06:19,110 --> 00:06:22,107
Но тем не менее компьютер
не выдает ошибки,

91
00:06:22,107 --> 00:06:25,682
просто предупреждает о
результате выполнения операции.

92
00:06:25,682 --> 00:06:29,107
Например, я могу поместить результат
деления 0 на 0 в переменную t.

93
00:06:29,107 --> 00:06:30,234
(t <-
0/0) Ну,

94
00:06:30,234 --> 00:06:32,414
вот можно посмотреть на переменную t.

95
00:06:32,414 --> 00:06:33,610
t — это not a number.

96
00:06:33,610 --> 00:06:38,989
И еще один особый объект, с которым
приходится работать — это бесконечность.

97
00:06:38,989 --> 00:06:40,906
Иногда процедура оптимизации,

98
00:06:40,906 --> 00:06:44,432
там при методе максимального
правдоподобия или какие другие,

99
00:06:44,432 --> 00:06:49,268
в результате выходят какие-нибудь там,
какая-нибудь оценка, равная бесконечности.

100
00:06:49,268 --> 00:06:50,566
Этого не стоит пугаться.

101
00:06:50,566 --> 00:06:53,929
R умеет работать корректно с таким
объектом, как бесконечность.

102
00:06:53,929 --> 00:06:55,583
Например, я могу один.

103
00:06:55,583 --> 00:06:59,356
Ну, во-первых, как будет бесконечность?

104
00:06:59,356 --> 00:07:04,383
Если 1 поделить на 0, то получится
Infinity, вот английскими Inf.

105
00:07:04,383 --> 00:07:09,115
Соответственно, например,
если я 1 поделю на Inf (обратите внимание,

106
00:07:09,115 --> 00:07:13,530
Inf надо написать с большой буквы,
R отличает строчные и заглавные буквы),

107
00:07:13,530 --> 00:07:16,907
если 1 поделить на Inf, будет 0.

108
00:07:16,907 --> 00:07:24,460
Если, например, взять арктангенс atan(Inf)

109
00:07:24,460 --> 00:07:29,558
арктангенс от Infinity,
то получится 1, 57.

110
00:07:29,558 --> 00:07:34,129
Может быть, кто-то даже узнает,
что 1,57 — это пи пополам.

111
00:07:34,129 --> 00:07:35,310
Давайте сравним.

112
00:07:35,310 --> 00:07:38,903
Если я пи поделю пополам, я получу 1, 57.

113
00:07:38,903 --> 00:07:43,922
То есть компьютер корректно берет
арктангенс от бесконечности,

114
00:07:43,922 --> 00:07:47,570
и какие-то другие операции с
бесконечностью тоже выполнять можно.

115
00:07:47,570 --> 00:07:52,950
Соответственно, когда создается вектор,

116
00:07:52,950 --> 00:07:56,724
ну, обычно, он либо читается из реальных
данных, то есть у вас где-то есть файл,

117
00:07:56,724 --> 00:08:00,060
который, там, те люди,
которые собирали анкеты,

118
00:08:00,060 --> 00:08:04,224
заполнили в каком-нибудь формате его,
и вы его читаете в R.

119
00:08:04,224 --> 00:08:06,861
Ну, иногда нужно создать вектор руками.

120
00:08:06,861 --> 00:08:11,314
Как правило, часто нужны бывают
вектора последовательных чисел.

121
00:08:11,314 --> 00:08:17,516
Ну, например, если я хочу задать вектор
z чисел последовательных от 100 до 200,

122
00:08:17,516 --> 00:08:23,550
то я напишу 100:200,
нажму Enter и вот могу посмотреть на z.

123
00:08:23,550 --> 00:08:27,050
Вот z — это у меня вектор
чисел от 100 до 200.

124
00:08:27,050 --> 00:08:30,660
Ну и сразу можно сказать,
что означают числа сбоку.

125
00:08:30,660 --> 00:08:33,271
Числа сбоку — это номер первого элемента.

126
00:08:33,271 --> 00:08:37,500
Поскольку z — это вектор из 101-го числа
(от ста до двухсот — сто одно число),

127
00:08:37,500 --> 00:08:45,120
то поэтому вот 118 — это 19-е число,
а 137 — это 38-е число.

128
00:08:45,120 --> 00:08:46,436
Ну, пойдем дальше.

129
00:08:46,436 --> 00:08:51,490
Если вы ошиблись, например, вы набрали
coss(pi) косинус с двумя «s» от пи,

130
00:08:51,490 --> 00:08:55,940
то компьютер таки выдаст ошибку,
что не может найти функцию косинус.

131
00:08:55,940 --> 00:09:00,246
Ну, если вы все-таки наберете
косинус правильно, не с двумя «s»,

132
00:09:00,246 --> 00:09:03,007
а с одним, то никаких проблем не будет.

133
00:09:03,007 --> 00:09:05,870
Косинус от пи по-прежнему равен -1.

134
00:09:05,870 --> 00:09:10,890
Еще один важный момент,
на который часто напарываются новички,

135
00:09:10,890 --> 00:09:13,274
а опытные пользователи используют, это то,

136
00:09:13,274 --> 00:09:15,910
что R позволяет ввести одну
команду в две строчки.

137
00:09:15,910 --> 00:09:21,360
Ну, например, если я, допустим, о чем-то
задумался, начал вводить косинус пи,

138
00:09:21,360 --> 00:09:29,394
да забыл закрыть скобку и нажал Enter,
то компьютер понял, что ввод не окончен.

139
00:09:29,394 --> 00:09:34,030
То ли я хотел внутри косинуса к пи что-то
прибавить, то ли просто скобку закрыл?

140
00:09:34,030 --> 00:09:38,040
Но если вы видите, знак треугольничка
(приглашение) сменился на плюсик.

141
00:09:38,040 --> 00:09:41,970
А раз он, это означает,
что компьютер ждет продолжения ввода.

142
00:09:41,970 --> 00:09:47,125
Ну, если я обратил на это внимание,
если это там ошибка, которую я заметил,

143
00:09:47,125 --> 00:09:51,157
или это было сделано сознательно,
то я могу закончить просто ввод,

144
00:09:51,157 --> 00:09:55,720
добавить скобку,
нажать Enter и получить тот же самый -1.

145
00:09:55,720 --> 00:10:01,237
Ну, используют это часто,
когда у вас большое выражение, там,

146
00:10:01,237 --> 00:10:03,374
допустим: 5 + 6 + 7-

147
00:10:03,374 --> 00:10:07,636
9, потом еще решили что-то прибавить,
нажали Enter,

148
00:10:07,636 --> 00:10:10,590
вот опять приглашение сменилось на плюс.

149
00:10:10,590 --> 00:10:14,190
Еще раз, этот плюс не потому,
что я прибавляю, а плюс — это в смысле,

150
00:10:14,190 --> 00:10:17,327
что ждет еще плюс одну строку,
может быть, плюс две.

151
00:10:17,327 --> 00:10:20,179
Не в том смысле,
что это последний знак строки.

152
00:10:20,179 --> 00:10:22,171
Это так случайно совпало сейчас.

153
00:10:22,171 --> 00:10:24,560
Ну, соответственно, + 10 + 7.

154
00:10:24,560 --> 00:10:28,011
Ну вот прекрасно посчитал: 26.

155
00:10:28,011 --> 00:10:33,554
Но очень часто бывает у новичков это, вот
это появление этого плюса из-за ошибки.

156
00:10:33,554 --> 00:10:38,288
Вы начали писать: cos(pi),
потом прибавили sin(,

157
00:10:38,288 --> 00:10:41,492
скобку вот не закрыли, появился плюс.

158
00:10:41,492 --> 00:10:45,028
И вы просто поняли, ой,
да не хочу я продолжать эту строчку.

159
00:10:45,028 --> 00:10:50,487
Ну, тогда просто нажимаете Escape,
и плюсик сменяется на треугольничек,

160
00:10:50,487 --> 00:10:55,779
который говорит,
что можно вводить команду заново с нуля.

161
00:10:55,779 --> 00:11:01,068
И, соответственно,
на этом наше короткое введение в

162
00:11:01,068 --> 00:11:05,166
консольный решим закончится, а дальше мы
поговорим о режиме написания скрипта,

163
00:11:05,166 --> 00:11:07,750
с которым нам приходится
работать основное время.

